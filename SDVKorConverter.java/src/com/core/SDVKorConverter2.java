/** * SDVKorConverter *  * Version	Date * ====================== * 0.1		2017.07.24 *  * 		by. gg (eun033@naver.com) */package com.core;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.FileReader;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.util.HashMap;import java.util.HashSet;import java.util.Map;import org.apache.commons.lang3.ArrayUtils;import org.apache.commons.lang3.StringUtils;public class SDVKorConverter2 {	private final static boolean DEBUG = true;		private final static String SOURCE_DIR = System.getProperty("user.dir");		private final static String KOR_TBL = SOURCE_DIR+"\\resource\\Table.tbl";	private final static String KOR_DIR = SOURCE_DIR+"\\korea\\";	private final static String RUS_DIR = SOURCE_DIR+"\\russia\\";		private final static String LINE = System.getProperty("line.separator");		private final static Map<Character, Character> KOR_DIC = new HashMap<Character,Character>();		public static void main (String[] args) {		String[] arg = {"toKor", "toRu", "1", "2"};				// 허용된 명령어가 아닌 경우		if(args == null || args.length == 0 || !ArrayUtils.contains(arg,args[0])) {			System.out.println("args ?");			System.out.println("'toKor' or '1' : russia -> korea");			System.out.println("'toRu' or '2' : korea -> russia");					} else {			initDic();			converter(args[0]);			System.out.println("");			System.out.println("***************************** FIN!!!!");		}	}		/**	 * 프로그램 분기 처리	 * @param arg	 */	static void converter(String arg) {		String method = "";		String dirInput = "", dirOutput = "";		// default		if(arg.equals("toKor") || arg.equals("1")) {			method = "1";			dirInput = RUS_DIR;	dirOutput = KOR_DIR;			System.out.println(method + ". Russia to Korea");		} else if(arg.equals("toRu") || arg.equals("2")) {			method = "2";			dirInput = KOR_DIR;	dirOutput = RUS_DIR;			System.out.println(method + ". Korea to Russia");		}						// to file list		HashSet<String> inputHs = new HashSet<String>();		File dir = new File(dirInput);		if(dir.exists()){			String[] dirfile = dir.list();			for (int ii=0; ii<dirfile.length;ii++){				inputHs.add(dirfile[ii]);			}		}				System.out.println("\t+ input file list");		if(DEBUG){			for (String v : inputHs) {				System.out.println("\t\t"+v);			}		}				System.out.println("");		// from create file		if(inputHs.size() > 0) {			System.out.println("\t+ output file");			for (String fnm : inputHs) {				String fnm_output = dirOutput + fnm;				String fnm_input = dirInput + fnm;				try {					//BufferedWriter fw = new BufferedWriter(new FileWriter(fnm_output, false));					BufferedWriter fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fnm_output), "UTF-8"));					String s = null;					BufferedReader br = new BufferedReader(new FileReader(new File(fnm_input)));					while ((s = br.readLine()) != null) {						//System.out.println(" before " + s);						if (StringUtils.isNotBlank(s)) {							s = converter(method,s); // KoreaConverter(s);						}						//System.out.println(" after " + s);						fw.write(s+LINE);						fw.flush();					}										fw.close();					br.close();				} catch (Exception e) {					e.printStackTrace();				}								if(DEBUG) System.out.println("\t\t" + fnm + " finish");			}		}		/*		// TEST		String _test= "재스와 마니 이모는 나 없이도 잘 지낼 수 있을 거야.#$e#별로 걱정되진 않아... 자스는 이제 혼자서 동물들을 돌 볼 수도 있는 나이니까.";		String test = RussiaConverter(_test);		System.out.println(" test :: " + test);		String _test2="ܦןڮ Ѕʦ ܋пʙ ȣ ٻ܋˪ ܞ ޓȷ ֽ ܕۺ Ĥ٢.#$e#һο ĥ݁˼ޕ ٍى... ܙןʙ ܋݃ ৔ܙմ ˴ѝ̞ۺ ˮ Ӈ ֽ˪ ܕʙ ȣ܋ʦƫ.";		String test2 = KoreaConverter(_test2);		System.out.println(" test2 :: " + test2);		System.out.println(_test.equalsIgnoreCase(test2));		*/	}	/**	 * 번역기 분리	 * @param method	 * @param str	 * @return	 */	static String converter(String method, String str) {		if(method.equals("1")) {			return KoreaConverter(str);		}		return RussiaConverter(str);	}	/**	 * KoreaConverter	 * @param text	 * @return	 */	static String KoreaConverter(String text) {		String output = "";		for (char c : text.toCharArray()) {			if (KOR_DIC.containsValue(c)) {				output += getKey(c);			} else {				output += c;			}		}		return output;	}	/**	 * RussiaConverter	 * @param text	 * @return	 */	static String RussiaConverter(String text) {		String output = "";		for (char c : text.toCharArray()) {			if (KOR_DIC.containsKey(c)) {				output += KOR_DIC.get(c);			} else {				output += c;			}		}		return output;	}			/**	 * Dic init	 */	static void initDic (){		BufferedReader br = null;		try {			//br = new BufferedReader(new FileReader(new File(KOR_TBL)));			br = new BufferedReader(new InputStreamReader(new FileInputStream(KOR_TBL),"UTF16"));			String s = null;			int i = 0;			while ((s = br.readLine()) != null) {				s = s.trim();				if (StringUtils.isNotBlank(s)) {					if(i==0) System.out.println(" ori " +s);					char[] ca = s.toCharArray();					char key = ca[0];					char val = ca[2];					//System.out.println(key+"="+val);					KOR_DIC.put(key, val);					i++;				}			}			if(DEBUG) System.out.println("0. Dic init count : " + KOR_DIC.size());					} catch (Exception e) {			e.printStackTrace();		} finally {			try {				br.close();			} catch (Exception e) {}		}	}		public static Object getKey(char v) { 		for(char k : KOR_DIC.keySet()) { 			if(KOR_DIC.get(k) == v) { 				return k; 			} 		}		return v;	}	}